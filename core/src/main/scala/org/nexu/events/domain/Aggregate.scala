package org.nexu.events.domain

import org.nexu.events.command.Command
import org.nexu.events.event.Event

/**
 * DDD pattern concept.
 * An aggregate is a cluster of domain objects that can be treated as a single unit. (ref. M.Fowler)
 */
trait Aggregate {

  /**
   * entry point for command
   * @return event generated by the business function
   */
  def onCommand: PartialFunction[Command, Event]

  /**
   * entry point to receive events in order to rebuild aggregate
   * @param event
   * @return new aggregate with the update according to the event in parameter
   */
  def replay(event: Event): Aggregate

  /**
   * Unique identifier of an aggregate
   * @return
   */
  def getAggregateId: String

  /**
   *
   * @return
   */
  def getVersion: Long

}
