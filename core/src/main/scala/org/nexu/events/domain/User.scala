package org.nexu.events.domain

import java.util.Objects.nonNull

import org.nexu.events.command.{CreateUser, DeleteUser}
import org.nexu.events.event._


case class User(email: String, nickname: String, version: Long = 0, active: Boolean = true) extends Aggregate {

  def isValid = {
    require(nonNull(email))
  }

  /**
    * entry point for command
    * @return event generated by the business function
    */
  override def onCommand = {
    case userCommand: CreateUser => new UserCreated(this)
    case userCommand: DeleteUser => new UserDeleted(this)
  }

  /**
    * entry point to receive events in order to rebuild aggregate
    * @param event
    * @return new aggregate with the update according to the event in parameter
    */
  override def replay(event: Event): Aggregate = {
    event match {
      case createUser: UserCreated => createUser.getAggregate.copy(version = version + 1)
      case deleteUser: UserDeleted => this.copy(version = version + 1, active = false)
    }
  }

  /**
    * Unique identifier of an aggregate
    * @return
    */
  override def getAggregateId: String = email

  /**
    *
    * @return
    */
  override def getVersion: Long = version
}

